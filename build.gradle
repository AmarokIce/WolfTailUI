buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = "https://jcenter.bintray.com/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }

        if (project.enableUsingKotlin.toBoolean()) { classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$project.kotlin_version" }
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'forge'

if (project.enableUsingKotlin.toBoolean()) {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.kotlin.jvm'
}

version = "${project.modVersion}"
group = "${project.modGroupId}"
archivesBaseName = "${project.modArchivesName}"

configurations {
    includeCompile
    implementation.extendsFrom includeCompile
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "minecraft"
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name "Curse Maven"
        url "https://cursemaven.com"
    }

    maven {
        name "Modrinth Maven"
        url "https://api.modrinth.com/maven"
    }
}

dependencies {
    if (project.enableUsingKotlin.toBoolean()) {
        // implementation "curse.maven:AJSCore-445557:$asjcore_laster"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    }

    if (project.enableUsingMysteriumLib.toBoolean()) {
        implementation "curse.maven:MysteriumLib-645051:3963822"
    }
}

processResources {
    inputs.property "modversion", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "moddescription", project.modDescription
    inputs.property "modname", project.modName
    inputs.property "modid", project.modId

    filesMatching("mcmod.info") {
        expand  'modversion': project.version,
                'mcversion': project.minecraft.version,
                'moddescription': project.modDescription,
                'modname': project.modName,
                'modid': project.modId
    }
}

jar {
    from file("./LICENSE")
}

if (project.enableUsingMixin.toBoolean()) {
    apply from: 'mixin.gradle'
} else {
    jar {
        from {
            configurations.includeCompile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
}

if (project.enableUsingMysteriumLib.toBoolean()) {
    jar {
        manifest {
            attributes 'FMLCorePlugin': "${project.patchClass}"
            attributes 'FMLCorePluginContainsFMLMod': 'true'
        }
    }
}

sourceCompatibility = targetCompatibility = "1.8"

tasks.withType(Jar).configureEach {
    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:all"
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:all"
            }
        }
    }
}

if (project.enableUsingKotlin.toBoolean()) {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

tasks.register('deobfJar', Jar) {
    dependsOn reobf
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    classifier 'deobf'

    from sourceSets.main.output
    manifest.attributes(jar.manifest.getAttributes())
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    classifier 'deobf-sources'

    from sourceSets.main.allSource
    exclude "assets"
    exclude "asjlib_at.cfg"
    exclude "methods.bin"
    exclude "McpToSrg.csv"
}

artifacts {
    archives deobfJar
    archives sourcesJar
}
